# OpenRISC ORBIS32 Instruction Set, v1.3

#
# Macros
#
macro halfAdd(result, left, right) {
	CY = carry(left, right);
	OV = scarry(left, right);
	result = left + right;
}

macro fullAdd(result, left, right) {
	local carry = zext(CY);
	halfAdd(result, left, right);
	CY = CY || carry(result, carry);
	OV = OV ^^ scarry(result, carry);
	result = result + carry;
}

macro halfSub(result, left, right) {
	CY = left < right;
	OV = sborrow(left, right);
	result = left - right;
}

macro mul64s(result, left, right) {
	local left_ext:8  = sext(left);
	local right_ext:8 = sext(right);
	result = left_ext * right_ext;
}

macro mul64z(result, left, right) {
	local left_ext:8  = zext(left);
	local right_ext:8 = zext(right);
	result = left_ext * right_ext;
}

macro getmac(var) {
	var = zext(MACHI) << 32 | zext(MACLO);
}

macro setmac(var) {
	MACHI = var(4);
	MACLO = var:4;
}

#
# Custom operations
#
define pcodeop csync;
define pcodeop msync;
define pcodeop psync;
define pcodeop macsync;

define pcodeop cust1;
define pcodeop cust2;
define pcodeop cust3;
define pcodeop cust4;
define pcodeop cust5;
define pcodeop cust6;
define pcodeop cust7;
define pcodeop cust8;

#
# Operands
#
iI: imm16 is imm16 {
	local val:4 = imm16;
	export val;
}

iK: uimm16 is uimm16 {
	local val:4 = uimm16;
	export val;
}

iL: uimm5 is uimm5 {
	local val:4 = uimm5;
	export val;
}

mB: imm16(rA) is imm16 & rA {
	local ea = rA + imm16;
	export ea;
}

mD: offset(rA) is rA & imm16a & imm16b [ offset = imm16a << 11 | imm16b; ] {
	local ea = rA + offset;
	export ea;
}

mN: ea is imm26 [ ea = (imm26 << 2) + inst_start; ] {
	export *:4 ea;
}

mNadrp: page is imm21 [ page = imm21 << 13; ] {
	local ea:4 = page + (inst_start & -8192);
	export ea;
}

sprD: ea is uimm16a & uimm16b [ ea = uimm16a << 11 | uimm16b; ] {
	local tmp:4 = ea;
	export tmp;
}

#
# Instructions
#
:l.j mN is opcode = 0x0 & mN {
	delayslot(1);
	goto mN;
}

:l.jal mN is opcode = 0x1 & mN {
	r9 = inst_next + 4;
	delayslot(1);
	call mN;
}

:l.adrp rD, mNadrp is opcode = 0x2 & rD & mNadrp {
	rD = mNadrp;
}

:l.bnf mN is opcode = 0x3 & mN {
	local flag = F;
	delayslot(1);
	if (!flag) goto mN;
}

:l.bf mN is opcode = 0x4 & mN {
	local flag = F;
	delayslot(1);
	if (flag) goto mN;
}

:l.nop iK is opcode = 0x5 & op5code = 0x1 & iK {}

with : opcode = 0x6 {
	:l.movhi rD, iK is op6code = 0x0 & rD & iK {
		rD = iK << 16;
	}

	:l.macrc rD is op6code = 0x1 & uimm16 = 0x0 & rD {
		macsync();
		rD = MACLO;
		MACLO = 0;
		MACHI = 0;
	}
}

with : opcode = 0x8 {
	:l.sys iK is op8code = 0x000 & iK {
		EPCR0 = inst_start;
		ESR0 = SR;
		goto 0xc00;
	}

	:l.trap iK is op8code = 0x100 & iK {
		EPCR0 = inst_start;
		ESR0 = SR;
		goto 0xe00;
	}

	:l.msync is op8code = 0x200 & uimm16 = 0x0 { msync(); }
	:l.psync is op8code = 0x280 & uimm16 = 0x0 { psync(); }
	:l.csync is op8code = 0x300 & uimm16 = 0x0 { csync(); }
}

:l.rfe is opcode = 0x9 {
	SR = ESR0;
	goto [EPCR0];
}

:l.jr rB is opcode = 0x11 & rB {
	local ea = rB;
	delayslot(1);
	goto [ea];
}

:l.jr rB is opcode = 0x11 & rB & rB = 0x9 {
	local ea = rB;
	delayslot(1);
	return [ea];
}

:l.jalr rB is opcode = 0x12 & rB {
	local ea = rB;
	r9 = inst_next + 4;
	delayslot(1);
	call [ea];
}

:l.maci rA, iI is opcode = 0x13 & rA & iI {
	local previous;
	local result;
	getmac(previous);
	mul64s(result, rA, iI);
	OV = scarry(previous, result);
	result = previous + result;
	setmac(result);
}

:l.lf  rD, mB is opcode = 0x1a & rD & mB { rD = *:4 mB; }
:l.lwa rD, mB is opcode = 0x1b & rD & mB { rD = *:4 mB; }

:l.cust1 is opcode = 0x1c { cust1(); }
:l.cust2 is opcode = 0x1d { cust2(); }
:l.cust3 is opcode = 0x1e { cust3(); }
:l.cust4 is opcode = 0x1f { cust4(); }

:l.lwz rD, mB is opcode = 0x21 & rD & mB { rD = *:4 mB; }
:l.lws rD, mB is opcode = 0x22 & rD & mB { rD = *:4 mB; }
:l.lbz rD, mB is opcode = 0x23 & rD & mB { rD = zext(*:1 mB); }
:l.lbs rD, mB is opcode = 0x24 & rD & mB { rD = sext(*:1 mB); }
:l.lhz rD, mB is opcode = 0x25 & rD & mB { rD = zext(*:2 mB); }
:l.lhs rD, mB is opcode = 0x26 & rD & mB { rD = sext(*:2 mB); }

:l.addi  rD, rA, iI is opcode = 0x27 & rD & rA & iI { halfAdd(rD, rA, iI); }
:l.addic rD, rA, iI is opcode = 0x28 & rD & rA & iI { fullAdd(rD, rA, iI); }
:l.andi  rD, rA, iK is opcode = 0x29 & rD & rA & iK { rD = rA & iK; }
:l.ori   rD, rA, iK is opcode = 0x2a & rD & rA & iK { rD = rA | iK; }
:l.xori  rD, rA, iI is opcode = 0x2b & rD & rA & iI { rD = rA ^ iI; }

:l.muli  rD, rA, iI is opcode = 0x2c & rD & rA & iI {
	local result;
	mul64s(result, rA, iI);
	OV = result s>= 0x100000000 || result s<= -0x100000000;
	rD = result:4;
}

:l.mfspr rD, rA, iK is opcode = 0x2d & rD & rA & iK {
	local ea = rA | iK;
	rD = *[register]ea;
}

with : opcode = 0x2e {
	:l.slli rD, rA, iL is mod = 0x0 & rD & rA & iL { rD = rA  << iL; }
	:l.srli rD, rA, iL is mod = 0x1 & rD & rA & iL { rD = rA  >> iL; }
	:l.srai rD, rA, iL is mod = 0x2 & rD & rA & iL { rD = rA s>> iL; }
	:l.rori rD, rA, iL is mod = 0x3 & rD & rA & iL { rD = rA  >> iL | rA << (32 - iL); }
}

with : opcode = 0x2f {
	:l.sfeqi  rA, iI is cond = 0x0 & rA & iI { F = rA  == iI; }
	:l.sfnei  rA, iI is cond = 0x1 & rA & iI { F = rA  != iI; }
	:l.sfgtui rA, iI is cond = 0x2 & rA & iI { F = rA  >  iI; }
	:l.sfgeui rA, iI is cond = 0x3 & rA & iI { F = rA  >= iI; }
	:l.sfltui rA, iI is cond = 0x4 & rA & iI { F = rA  <  iI; }
	:l.sfleui rA, iI is cond = 0x5 & rA & iI { F = rA  <= iI; }
	:l.sfgtsi rA, iI is cond = 0xa & rA & iI { F = rA s>  iI; }
	:l.sfgesi rA, iI is cond = 0xb & rA & iI { F = rA s>= iI; }
	:l.sfltsi rA, iI is cond = 0xc & rA & iI { F = rA s<  iI; }
	:l.sflesi rA, iI is cond = 0xd & rA & iI { F = rA s<= iI; }
}

:l.mtspr rA, rB, sprD is opcode = 0x30 & rA & rB & sprD {
	local ea = rA | sprD;
	*[register]ea = rB;
}

with : opcode = 0x31 {
	:l.mac rA, rB is minor = 0x1 & rA & rB {
		local previous;
		local result;
		getmac(previous);
		mul64s(result, rA, rB);
		OV = scarry(previous, result);
		result = previous + result;
		setmac(result);
	}

	:l.msb rA, rB is minor = 0x2 & rA & rB {
		local previous;
		local result;
		getmac(previous);
		mul64s(result, rA, rB);
		OV = sborrow(previous, result);
		result = previous - result;
		setmac(result);
	}

	:l.macu rA, rB is minor = 0x3 & rA & rB {
		local previous;
		local result;
		getmac(previous);
		mul64z(result, rA, rB);
		CY = carry(previous, result);
		result = previous + result;
		setmac(result);
	}

	:l.msbu rA, rB is minor = 0x4 & rA & rB {
		local previous;
		local result;
		getmac(previous);
		mul64z(result, rA, rB);
		CY = previous < result;
		result = previous - result;
		setmac(result);
	}
}

# Assume atomic stores always succeed
:l.swa mD, rB is opcode = 0x33 & mD & rB {
	*mD = rB:4;
	F = 1;
}

:l.sw  mD, rB is opcode = 0x35 & mD & rB { *mD = rB:4; }
:l.sb  mD, rB is opcode = 0x36 & mD & rB { *mD = rB:1; }
:l.sh  mD, rB is opcode = 0x37 & mD & rB { *mD = rB:2; }

with : opcode = 0x38 {
	with : major = 0x0 {
		:l.add  rD, rA, rB is minor = 0x0 & rD & rA & rB { halfAdd(rD, rA, rB); }
		:l.addc rD, rA, rB is minor = 0x1 & rD & rA & rB { fullAdd(rD, rA, rB); }
		:l.sub  rD, rA, rB is minor = 0x2 & rD & rA & rB { halfSub(rD, rA, rB); }
		:l.and  rD, rA, rB is minor = 0x3 & rD & rA & rB { rD = rA & rB; }
		:l.or   rD, rA, rB is minor = 0x4 & rD & rA & rB { rD = rA | rB; }
		:l.xor  rD, rA, rB is minor = 0x5 & rD & rA & rB { rD = rA ^ rB; }

		with : minor = 0x8 {
			:l.sll rD, rA, rB is mod = 0x0 & rD & rA & rB { rD = rA  << rB; }
			:l.srl rD, rA, rB is mod = 0x1 & rD & rA & rB { rD = rA  >> rB; }
			:l.sra rD, rA, rB is mod = 0x2 & rD & rA & rB { rD = rA s>> rB; }

			:l.ror rD, rA, rB is mod = 0x3 & rD & rA & rB {
				rD = rA >> rB | rA << (32 - rB);
			}
		}

		with : minor = 0xc {
			:l.exths rD, rA is mod = 0x0 & rD & rA { rD = sext(rA:2); }
			:l.extbs rD, rA is mod = 0x1 & rD & rA { rD = sext(rA:1); }
			:l.exthz rD, rA is mod = 0x2 & rD & rA { rD = zext(rA:2); }
			:l.extbz rD, rA is mod = 0x3 & rD & rA { rD = zext(rA:1); }
		}

		with : minor = 0xd {
			:l.extws rD, rA is mod = 0x0 & rD & rA { rD = sext(rA:4); }
			:l.extwz rD, rA is mod = 0x1 & rD & rA { rD = zext(rA:4); }
		}
	}

	:l.cmov rD, rA, rB is major = 0x0 & minor = 0xe & rD & rA & rB {
		if (F) goto <choose_rA>;
		rD = rB;
		goto inst_next;
		<choose_rA>
		rD = rA;
	}

	:l.ff1 rD, rA is major = 0x0 & minor = 0xf & rD & rA {
		local bit = 0;
		if (rA == 0) goto <done>;
		<loop>
		local zero = (rA & (1 << bit)) == 0;
		bit = bit + 1;
		if (zero) goto <loop>;
		<done>
		rD = bit;
	}

	:l.fl1 rD, rA is major = 0x1 & minor = 0xf & rD & rA {
		local bit = 0;
		if (rA == 0) goto <done>;
		bit = 32;
		<loop>
		bit = bit - 1;
		local zero = (rA & (1 << bit)) == 0;
		if (zero) goto <loop>;
		bit = bit + 1;
		<done>
		rD = bit;
	}

	with : major = 0x3 {
		:l.mul rD, rA, rB is minor = 0x6 & rD & rA & rB {
			local result;
			mul64s(result, rA, rB);
			OV = result s>= 0x100000000 || result s<= -0x100000000;
			rD = result:4;
		}

		:l.div rD, rA, rB is minor = 0x9 & rD & rA & rB {
			OV = rB == 0;
			rD = rA s/ rB;
		}

		:l.divu rD, rA, rB is minor = 0xa & rD & rA & rB {
			CY = rB == 0;
			rD = rA / rB;
		}

		:l.mulu rD, rA, rB is minor = 0xb & rD & rA & rB {
			local result;
			mul64z(result, rA, rB);
			CY = result >= 0x100000000;
			rD = result:4;
		}

		:l.muld rA, rB is minor = 0x7 & rA & rB {
			local result;
			mul64s(result, rA, rB);
			setmac(result);
		}

		:l.muldu rA, rB is minor = 0xc & rA & rB {
			local result;
			mul64z(result, rA, rB);
			setmac(result);
		}
	}
}

with : opcode = 0x39 {
	:l.sfeq  rA, rB is cond = 0x0 & rA & rB { F = rA  == rB; }
	:l.sfne  rA, rB is cond = 0x1 & rA & rB { F = rA  != rB; }
	:l.sfgtu rA, rB is cond = 0x2 & rA & rB { F = rA  >  rB; }
	:l.sfgeu rA, rB is cond = 0x3 & rA & rB { F = rA  >= rB; }
	:l.sfltu rA, rB is cond = 0x4 & rA & rB { F = rA  <  rB; }
	:l.sfleu rA, rB is cond = 0x5 & rA & rB { F = rA  <= rB; }
	:l.sfgts rA, rB is cond = 0xa & rA & rB { F = rA s>  rB; }
	:l.sfges rA, rB is cond = 0xb & rA & rB { F = rA s>= rB; }
	:l.sflts rA, rB is cond = 0xc & rA & rB { F = rA s<  rB; }
	:l.sfles rA, rB is cond = 0xd & rA & rB { F = rA s<= rB; }
}

:l.cust5 is opcode = 0x3c { cust5(); }
:l.cust6 is opcode = 0x3d { cust6(); }
:l.cust7 is opcode = 0x3e { cust7(); }
:l.cust8 is opcode = 0x3f { cust8(); }
